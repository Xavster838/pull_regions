from snakemake.utils import min_version
import pandas as pd
import os

min_version("6.0")

# define your configuration via python
# or define a yaml e.g.
configfile: 'config.yaml'

manifest_df = pd.read_csv(config['master_table'], sep='\t', header=0, dtype=str)
manifest_df = manifest_df.set_index(['sample', 'hap'], drop=False)
manifest_df.sort_index(inplace=True)

########## wildcard
wildcard_constraints:
    samp='|'.join(manifest_df['sample'].unique()),
    hap='|'.join(manifest_df['hap'].unique()),
    gene_oi = '|'.join( list(config['gene_oi'].keys()) ),
    rgn = '|'.join( list(config['regions'].keys()) )
##########

########## ALL HELPER FUNCTIONS
def get_geneOI_path(wc):
    '''return path from config of gene_OI.'''
    return config['gene_oi'][wc.gene_oi]

def get_query_fa(wc):
    '''get query fasta file from manifest given wildcards. Return file path'''
    return manifest_df.at[(wc.samp, wc.hap), 'fasta']

def get_ref(wc):
    '''get reference fasta from config. return file path'''
    return config['ref']

def get_rgn_bed(wc):
    '''get region bed given wildcard region'''
    return config['regions'][wc.rgn]
###############


# rule all:
#     input:
#     expand()

rule map_geneOI:
    '''map gene of interest to query haplotype with minimap2 and return paf file of all coordinates
       input: query hap, gene_oi
       output: 1. paf of alignments ; 2. bed of geneOIs in query
    '''
    input:
        gene_OI_fa = get_geneOI_path,
        query = get_query_fa
    output:
        bed = "results/geneOI_mapping/{gene_oi}_{samp}_{hap}.bed",
    resources:
        mem_mb=300
    threads: 4
    conda: "envs/env.yml" 
    shell:'''
    minimap2 -ax asm20 --secondary=yes -p 0.3 -N 10000 --eqx -t {threads} -r 500 -K 200M {input.query} {input.gene_OI_fa} | \
	samtools view -b - | \
	samtools sort | \
	bedtools bamtobed -i - > {output.bed}
'''

rule get_unique:
    '''
    get unique sequence of referecne regions of interest to be mapped to queries to pull regions
    @input: region bam, reference fasta
    @output: fasta of region sequence
    '''
    input:
        ref = get_ref,
        rgn_bed=get_rgn_bed
    output:
        fa = temp("tmp/{rgn}.fa")
    threads: 2
    resources:
        mem_mb = 200
    conda: "envs/env.yml"
    shell: '''
    bedtools getfasta -s -fi {input.ref} -bed {input.rgn_bed} -fo {output.fa} -nameOnly
'''

rule map_unique:
    '''map unique sequence of region of interest to query and return paf of unique alignment coordinates
       input: 1. query hap (fasta), 2. unique sequence of loc (fasta)
       output: paf file of unique sequence mappings
    '''
    input:
        query = get_query_fa
        rgn_fa=rules.get_unique.output.fa
    output:
        paf = temp("tmp/{rgn}_{samp}_{hap}_mapping.paf")
    threads: 8
    resources:
        mem_mb = 2000
    conda: "envs/env.yml"
    shell:'''
    minimap2 -x asm10 --secondary=no --eqx -t {threads} -r 500 -K 100M {input.query} {input.gene_OI_fa} > {output.paf}
'''

# rule get_loc_bed:
#     '''process paf from map_unique and return bedfile of region of interest
#        input: paf file from map_unique
#        output: bed file of merged location
#     '''

# rule get_loc_gene_bed:
#     '''process paf from rule.map_geneOI and rule.get_loc_bed to get location specific bed.
#        input: 1. gene bed from rule map_geneOI; 2. bed from rule get_loc_bed
#        output: 1. gene bed of genes of interest in locus region
#     '''

# rule get_pass_fail_haps:
#     '''figure out samples in master_table that passed from this approach
#        input: master table, all get_loc_bed
#        output: tab_separated file of each sample if passed or failed
#     '''

# rule get_loc_seq:
#     '''get location specific sequence
#        input: 1. bed from get_loc_bed; 2. query hap (fasta)
#        output: fasta sequence
#     '''
# rule get_gene_seq:
#     '''get gene bed specific sequence
#        input: 1. bed from rule map_geneOI; 2. query hap (fasta)
#        output: fasta sequence
#     '''

# rule get_loc_gene_seq:
#     '''get gene bed specific sequence
#        input: 1. bed from rule get_loc_gene_bed; 2. query hap (fasta)
#        output: fasta sequence
#     '''
